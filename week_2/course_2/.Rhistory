csn <- len(course.student.number)
# Create a variable csn, with data: length of course.student.number
csn <- length(course.student.number)
# Create a vector course.student.grade, with sample() function: x = c(55:100), size = csn
course.student.grade <- sample(c(55:100), csn)
# Create a vector course.student.grade, with sample() function: x = c(55:100), size = csn
course.student.grade <- sample(x = c(55:100), csn)
# Create a vector course.student.grade, with sample() function: x = c(55:100), size = csn
course.student.grade <- sample(x = c(55:100), size = csn)
# Assign course.student.number as names of the course.student.grade
names(course.student.grade) <- course.student.number
# Create csg.mean, with the mean value of course.student.grade
csg.mean <- course.student.grade / csn
type(csg)
type(csg.mean)
class(csg.mean)
# Create a vector csg.over.80, with the logical result of course.student.grade over 80
csg.over.80 <- course.student.grade >= 80
# Check csg.over.mean
csg.over.80
# Filter the course.student.grade with csg.over.mean
course.student.grade[csg.over.80]
print(paste("全班人數:", csn))
print(paste("全班平均：", csg.mean))
print(paste("全班最高：", csg.max))
print(paste("全班最低：", csg.min))
# Create csg.max with the max value of course.student.grade
csg.max <- max(course.student.grade)
# Create csg.min with the min value of course.student.grade
csg.min <- min(course.student.grade)
print(paste("全班人數:", csn))
print(paste("全班平均：", csg.mean))
print(paste("全班最高：", csg.max))
print(paste("全班最低：", csg.min))
# Create csg.mean, with the mean value of course.student.grade
csg.mean <- mean(course.student.grade)
print(paste("全班平均：", csg.mean))
# Print over 80 details
print(paste("高於80分總人數：", length(csg.over.80)))
print(paste("高於80分座號：", course.student.number(csg.over.80)))
print(paste("高於80分座號：", course.student.number[csg.over.80]))
print(paste("高於80分座號：", names(course.student.grade)[csg.over.80]))
print(paste("高於80分座號：", names(course.student.grade[csg.over.80])))
# Print over 80 details
print(paste("高於80分總人數：", length(course.student.grade[csg.over.80])))
print(paste("高於80分座號：", names(course.student.grade[csg.over.80])))
rm()
rm(ls)
ls()
rm(list = ls())
# Create a vector called course.students.number, with data: c(1, 30)
course.student.number <- c(1:30)
# Create a variable csn, with data: length of course.student.number
csn <- length(course.student.number)
# Create a vector course.student.grade, with sample() function: x = c(55:100), size = csn
course.student.grade <- sample(x = c(55:100), size = csn)
# Assign course.student.number as names of the course.student.grade
names(course.student.grade) <- course.student.number
# Create csg.mean, with the mean value of course.student.grade
csg.mean <- mean(course.student.grade)
# Create csg.max with the max value of course.student.grade
csg.max <- max(course.student.grade)
# Create csg.min with the min value of course.student.grade
csg.min <- min(course.student.grade)
# Create a vector csg.over.80, with the logical result of course.student.grade over 80
csg.over.80 <- course.student.grade >= 80
# Check csg.over.mean
csg.over.80
# Filter the course.student.grade with csg.over.mean
course.student.grade[csg.over.80]
# Print course information
print(paste("全班人數:", csn))
print(paste("全班平均：", csg.mean))
print(paste("全班最高：", csg.max))
print(paste("全班最低：", csg.min))
# Print over 80 details
print(paste("高於80分總人數：", length(course.student.grade[csg.over.80])))
print(paste("高於80分座號：", names(course.student.grade[csg.over.80])))
# Create a vector called course.students.number, with data: c(from 1 to 30)
course.student.number <- c(1:30)
# Create a variable csn, with data: length of course.student.number
csn <- length(course.student.number)
# Create a vector course.student.grade, with sample() function: x = c(55:100), size = csn
course.student.grade <- sample(x = c(55:100), size = csn)
# Assign course.student.number as names of the course.student.grade
names(course.student.grade) <- course.student.number
# Create csg.mean, with the mean value of course.student.grade
csg.mean <- mean(course.student.grade)
class(csg.mean)
# Create csg.max with the max value of course.student.grade
csg.max <- max(course.student.grade)
# Create csg.min with the min value of course.student.grade
csg.min <- min(course.student.grade)
# Create a vector csg.over.80, with the logical result of course.student.grade over 80
csg.over.80 <- course.student.grade >= 80
# Check csg.over.mean
csg.over.80
# Filter the course.student.grade with csg.over.mean
course.student.grade[csg.over.80]
# Print course information
print(paste("全班人數:", csn))
print(paste("全班平均：", csg.mean))
print(paste("全班最高：", csg.max))
print(paste("全班最低：", csg.min))
# Print over 80 details
print(paste("高於80分總人數：", length(course.student.grade[csg.over.80])))
print(paste("高於80分座號：", names(course.student.grade[csg.over.80])))
rm(list = ls())
# 基本變數資訊
person.name <- c("Jiyuian", "Shawnroom", "Bigmoumou")
person.sex <- c("F", "M", "M")
person.id <- c("jiyuian520", "shawnn520", "moumou123")
person.days <- c(201, 37, 99)
# 使用data.frame()，並以上述4個向量建立person.df
person.df <- data.frame(person.name, person.sex, person.id, person.days)
# 使用str()查看person.df結構
str(person.df)
# 使用summary()查看person.df summary
summary(person.df)
# 印出person.df
person.df
# 印出person.df第一列
person.df[1, ]
# 印出person.df第二列第三欄
person.df[2, 3]
$person.df[person.id]
person.df$person.days
# 查看person.df中person.id欄位(使用$)
person.df$person.id
# 使用order()將person.df$person.days排序後, 建立days.position
days.postion <- order(person.df$person.days)
# 使用days.postion, 排序person.df
person.df[days.postion, ]
# 使用grepl()，找出person.df$person.id中有520精神的
spirit.520 <- grepl("520", person.df$person.id)
# 篩選出520家族的成員
person.df[spirit.520, ]
?grepl
rm(list = ls())
SayHello <- function (name) {
print(name)
}
SayHello("Pecu") # Output > "Hello, Pecu"
SayHello <- function (name) {
print(paste("Hello, ",name))
}
SayHello("Pecu") # Output > "Hello, Pecu"
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm/100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m*my.height.m)
# Return my.bmi
return (my.bmi)
}
GetBmi(180, 55) # return 16.97531
# Call the GetBmi function we just made
my.bmi <- my.weight.kg / (my.height.m*my.height.m)
# Call the GetBmi function we just made
my.bmi <- my.weight.kg / [(my.height.cm/100)*(my.height.cm/100)]
CheckBmiLevel <- function (my.height.cm, my.weight.kg) {
# Call the GetBmi function we just made
my.bmi <- GetBmi(my.height.cm, my.weight.kg)
if (my.bmi >= 35) {
return(paste("Your bmi: ", my.bmi, ", 重度肥胖!"))
} else if (my.bmi >= 30) {
return(paste("Your bmi: ", my.bmi, ", 中度肥胖!"))
} else if (my.bmi >= 27) {
return(paste("Your bmi: ", my.bmi, ", 輕度肥胖!"))
} else if (my.bmi >= 24) {
return(paste("Your bmi: ", my.bmi, ", 過重!"))
} else if (my.bmi >= 18.5) {
return(paste("Your bmi: ", my.bmi, ", 正常範圍"))
} else {
return(paste("Your bmi: ", my.bmi, ", 過輕!"))
}
}
bmi.level.msg <- CheckBmiLevel(176, 70)
bmi.level.msg # "Your bmi:  22.5981404958678 , 正常範圍"
GetLargest <- function (vector) {
print(paste("The Largest Number is :", max(vector)))
}
vec_1 <- c(1, 5, 10, 200, 2000, 121)
GetLargest(vec_1)
view(test_data.csv)
View(test_data.csv)
test_data.csv
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ",", header = FALSE, stringsAsFactors = F)
FALSE
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = FALSE, stringsAsFactors = F)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
getwd()
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('./week2/cousre2/test_data.csv', sep = ',', header = T, stringsAsFactors = F)
setwd("~/GitHub/politics_and_information/week_2/course_2")
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
# 使用dim()查看df的維度(列數與欄數)
dim(df)
# 使用head()查看df前6筆資料
header(df)
# 使用head()查看df前6筆資料
head(df)
# 使用tail()查看df後6筆資料
tail(df)
# 使用summary()查看df的描述性統計
summary(df)
# 使用str()查看df的詳細資訊
str(df)
#建立一個3x2的矩陣，隨機從1~100內填入6個值
a <- matrix(sample(1:100, size=6), nrow=3, ncol=2)
#建立一個2x3的矩陣，隨機從1~100內填入6個值
b <- matrix(sample(1:100, size=6), nrow=2, ncol=3)
#建立一個4x4的方陣，隨機從1~100內填入16個值
c <- matrix(sample(1:100, size=16), nrow=4, ncol=4)
t(a)       #轉置
a
b
diag(b)
c
det(c)
c
solve(c)
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m*my.height.m)
# Return my.bmi
return (my.bmi)
}
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = FALSE, stringsAsFactors = F)
# 使用dim()查看df的維度(列數與欄數)
dim(df)
# 使用head()查看df前6筆資料
head(df)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
# 使用dim()查看df的維度(列數與欄數)
dim(df)
# 將df$School與df$Sex轉為factor型態
df$School <- as.factor(df$Sex)
df$Sex <- as.factor(df$Sex)
# 將df$School與df$Sex轉為factor型態
df$School <- as.factor(df$School)
?cbind
# 使用cbind()，新增Height與Weight至df為欄(column)資料
df <- cbind(df, Height, Weight)
### Part II - 資料框整理技巧I #######################################################
# 請注意vector特性：
# 向量物件只能接受一種類別，若給定多種類別會依[字串>數值>布林]進行自動轉換
# 這使得kobe資料內的型態都被轉存為chr了
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
# 使用cbind()，新增Height與Weight至df為欄(column)資料
df <- cbind(df, Height, Weight)
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
# 將df$School與df$Sex轉為factor型態
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$Sex)
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
rm(list = ls())
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
# 使用dim()查看df的維度(列數與欄數)
dim(df)
# 使用head()查看df前6筆資料
head(df)
# 使用tail()查看df後6筆資料
tail(df)
# 使用summary()查看df的描述性統計
summary(df)
# 使用str()查看df的詳細資訊
str(df)
# 將df$School與df$Sex轉為factor型態
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$Sex)
### Part II - 資料框整理技巧I #######################################################
# 請注意vector特性：
# 向量物件只能接受一種類別，若給定多種類別會依[字串>數值>布林]進行自動轉換
# 這使得kobe資料內的型態都被轉存為chr了
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
# 使用cbind()，新增Height與Weight至df為欄(column)資料
df <- cbind(df, Height, Weight)
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
rm(list = ls())
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
# 使用dim()查看df的維度(列數與欄數)
dim(df)
# 使用head()查看df前6筆資料
head(df)
# 使用tail()查看df後6筆資料
tail(df)
# 使用summary()查看df的描述性統計
summary(df)
# 使用str()查看df的詳細資訊
str(df)
# 將df$School與df$Sex轉為factor型態
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$Sex)
### Part II - 資料框整理技巧I #######################################################
# 請注意vector特性：
# 向量物件只能接受一種類別，若給定多種類別會依[字串>數值>布林]進行自動轉換
# 這使得kobe資料內的型態都被轉存為chr了
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
# 使用cbind()，新增Height與Weight至df為欄(column)資料
df <- cbind(df, Height, Weight)
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
# 重新使用str()檢查一次df的結構時...
# Age, Grade, Height, Weight都變成chr型態了?? <- 被kobe資料
str(df)
# 重新使用str()檢查一次df的結構時...
# Age, Grade, Height, Weight都變成chr型態了?? <- 被kobe資料
str(df)
# kobe的Grade資料出現了NA值，請將其重新設定為990分。
df$Grade[11] <- 990
# 重新使用str()檢查一次df的結構時...
# Age, Grade, Height, Weight都變成chr型態了?? <- 被kobe資料
str(df)
View(df)
# 轉換df欄位的資料型態 # Grade: integer, Age, Height, Weight: numeric
df$Grade <- as.integer(df$Grade)
df$Age <- as.numeric(df$Age)
df$Height <- as.numeric(df$Height)
df$Weight <- as.numeric(df$Weight)
# 查看df結構，是否是轉換完畢結果
str(df)
# 使用order()，以df$Grade將df遞減排序
df <- df[order(df$Grade, decreasing = T), ]
# 使用subset()，刪除df$Age欄位(另一種方式df$Age <- NULL)
df <- subset(df, select = c(-Age))
str(df)
# 使用names()，重新將Grade欄位命名為ToeicGrade
names(df)[Grade] <- "ToeicGrade"
# 使用names()，重新將Grade欄位命名為ToeicGrade
names(df)[4] <- "ToeicGrade"
# 使用subset()，篩選出ToeicGrade大於900並且身高大於170的人
# 且欄位只需要Name, ToeicGrade與Height
subset(df, Height > 170 & ToeicGrade > 900, select = c(Name, ToeicGrade, Height))
# 不使用subset()，篩選出df中School A的人。
df[df$School == A, ]
# 不使用subset()，篩選出df中School A的人。
df[df$School == 'A', ]
### Part III - 資料框整理技巧II #####################################################
df.sport <- data.frame(Name = c("Ali", "Petty", "Kobe"), FavSport = c("basketball", "baseball", "baseketball"))
View(df.sport)
df$ToeicLevel <- cut(x = df$ToeicGrade,
breaks = c(0, 600, 700, 800, 900, Inf),
labels = c("E", "D", "C", "B", "A"))
View(df)
# 使用mapply()進行bmi計算[調用GetBmi()，參數分別為df$Height, df$Weight]，回傳結果新增至df$Bmi欄位
# 參考http://blog.fens.me/r-apply/
df$Bmi <- mapply(GetBmi(), df$Height, df$Weight)
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m*my.height.m)
# Return my.bmi
return (my.bmi)
}
# 使用mapply()進行bmi計算[調用GetBmi()，參數分別為df$Height, df$Weight]，回傳結果新增至df$Bmi欄位
# 參考http://blog.fens.me/r-apply/
df$Bmi <- mapply(GetBmi(), df$Height, df$Weight)
# 使用mapply()進行bmi計算[調用GetBmi()，參數分別為df$Height, df$Weight]，回傳結果新增至df$Bmi欄位
# 參考http://blog.fens.me/r-apply/
df$Bmi <- mapply(GetBmi, df$Height, df$Weight)
df <- merge(df, df.sport, by = 'Name', all.x = T)
View(df)
### Crawler_Example with rvest    #####################################################################
# 參考：https://blog.gtwang.org/r/rvest-web-scraping-with-r/
rm(list = ls())
library(rvest)
library(rvest)
install.packages("rvest")
library(rvest)
library(rvest)
# Set url
url <- "https://www.ptt.cc/bbs/NBA/index5720.html"
# Get response
res <- read_html(url)
# Parse the content and extract the titles
raw.titles <- res %>% html_nodes("div.title")
# Extract link
nba.article.link <- raw.titles %>% html_node("a") %>% html_attr('href')
# Extract article
nba.article.title <- raw.titles %>% html_text()
# Create dataframe
nba.df <- data.frame(nba.article.title, nba.article.link)
View(nba.df)
# Set df's colnames
nba.df.col.names <- c("title", "link")
View(nba.df)
colnames(nba.df) <- nba.df.col.names
### Crawler_Example with jsonlite #####################################################################\
rm(list = ls())
library(jsonlite)
library(jsonlite)
url <- "https://www.dcard.tw/_api/posts?popular=true"
res <- fromJSON(url)
View(res)
library(httr)
library(httr)
url <- "http://ecshweb.pchome.com.tw/search/v3.3/all/results?q=sony&page=1&sort=rnk/dc"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$prods)
View(data.frame(do.call(rbind,res_json$prods)))
View(res)
View(res)
View(res)
View(res_json)
rm(list = ls())
library(httr)
url <- "http://api.kivaws.org/v1/lenders/jeremy/teams.json"
res = GET(url)
res_json = content(res)
View(res_json)
rm(list = ls())
library(httr)
url <- "http://api.kivaws.org/v1/lenders/jeremy/teams.json"
res = GET(url)
res_json = content(res)
View(res_json)
View(res_json)
do.call(rbind,res_json$teams)
View(data.frame(do.call(rbind,res_json$teams)))
View(data.frame(do.call(rbind,res_json$teams)))
install.packages("rmarkdown")
---
title: "KivaCrawler"
author: "Hannah"
date: "2018年3月17日"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## RCrawler
```{r RCrawler}
library(httr)
url <- "http://api.kivaws.org/v1/lenders/jeremy/teams.json"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$teams)
View(data.frame(do.call(rbind,res_json$teams)))
```
## Show Results
```{r Table}
library(knitr)
kable(raw)
```
install.packages("knitr")
install.packages("knitr")
View(data.frame(do.call(rbind,res_json$teams)))
library("httr", lib.loc="~/R/win-library/3.4")
library("knitr", lib.loc="~/R/win-library/3.4")
### Part III - 資料框整理技巧II #####################################################
df.sport <- data.frame(Name = c("Ali", "Petty", "Kobe"), FavSport = c("basketball", "baseball", "baseketball"))
rm(list = ls())
### Part III - 資料框整理技巧II #####################################################
df.sport <- data.frame(Name = c("Ali", "Petty", "Kobe"), FavSport = c("basketball", "baseball", "baseketball"))
View(df.sport)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
View(df)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
View(df)
subset(df, Name ='Kobe' , select = c(Name, Grade))
subset(df, Name =='Kobe' , select = c(Name, Grade))
# kobe的Grade資料出現了NA值，請將其重新設定為990分。
# df$Grade[11] <- 990
df$Grade[df$Name == 'Kobe'] <- 990
name(df)
names(df)
names(df)[names(df)=='Grade'] <- "ToeicGrade"
